Strategy:
   RandomIdentifier => RDI_Assign => RDI_Multiply

# Transform all identifier to random valid identifier.
# This Rule require syntax knowledge.
#
# %A::IDENTIFIER% used to matching any grammar element whose type
# is IDENTIFIER.
#
# %RDIdent(A)% is a command use
RandomIdentifier:
   LET IDENT = RD()
   IN {| %T %I = %E |} => {| %T $IDENT = %E |}
      where T \in Type /\ I \in Identifier

RDI_Assign:
   {| %I = %E |} => {| $IDENT = %E |}
   where %I == RandomIdentifier::%I /\
         Scope(%I) == Scope(RandomIdentifier::%I)

RDI_Multiply:
   {| %I * %E |} => {| $IDENT * %E |}
   where %I == RandomIdentifier::%I /\
         Scope(%I) == Scope(RandomIdentifier::%I)
